{"version":3,"sources":["components/Card.js","components/Profile.js","components/PersonalInfo.js","App.js","serviceWorker.js","index.js","GodShiro.jpg"],"names":["Card","props","class","children","Profile","title","black","orange","rowStyle","center","Personalinfo","Container","Row","src","image","style","alt","Col","xs","href","target","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"wPAUeA,MARf,SAAcC,GACZ,OACE,yBAAKC,MAAM,UACRD,EAAME,WCMEC,MATf,SAAiBH,GACf,OACE,6BACE,gCAAQ,2BAAIA,EAAMI,QACjBJ,EAAME,W,+CCDPG,EAAQ,CACZ,MAAS,SAELC,EAAS,CACb,MAAS,UAELC,EAAW,CACf,cAAe,QAEXC,EAAS,CACb,aAAc,UA8BDC,MA5Bf,SAAsBT,GAClB,OACE,kBAACU,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAK,yBAAKC,IAAKC,IAAOZ,MAAM,UAAUa,MAAOP,EAAUQ,IAAI,aAC3D,kBAACJ,EAAA,EAAD,CAAKG,MAAOP,GAAZ,cACA,kBAACI,EAAA,EAAD,CAAKG,MAAOP,GAAZ,gBACA,kBAACI,EAAA,EAAD,CAAKG,MAAOP,GAAZ,sBACA,kBAACI,EAAA,EAAD,CAAKG,MAAOP,GACV,kBAACS,EAAA,EAAD,CAAKC,GAAG,IAAIH,MAAON,GACjB,uBAAGU,KAAK,+BAA+BC,OAAO,SAASL,MAAOT,GAC5D,kBAAC,IAAD,QAGJ,kBAACW,EAAA,EAAD,CAAKC,GAAG,IAAIH,MAAON,GACjB,uBAAGU,KAAK,+BAA+BC,OAAO,SAASL,MAAOR,GAC5D,kBAAC,IAAD,QAGJ,kBAACU,EAAA,EAAD,CAAKC,GAAG,IAAIH,MAAON,GACjB,uBAAGU,KAAK,mDAAmDC,OAAO,UAChE,kBAAC,IAAD,WCTCC,MAtBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,6CACc,yCADd,qEAGA,gIAIF,8BACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAASjB,MAAM,wBACb,kBAAC,EAAD,WCRQkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,uC","file":"static/js/main.c35a9d61.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <div class=\"mycard\">\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card","import React from 'react';\r\n\r\nfunction Profile(props) {\r\n  return (\r\n    <div>\r\n      <strong><u>{props.title}</u></strong>  \r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Profile","import React from 'react';\r\nimport { FaGithub, FaGitlab, FaLinkedin } from 'react-icons/fa';\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport image from '../GodShiro.jpg'\r\n\r\nconst black = {\r\n  'color': 'black',\r\n}\r\nconst orange = {\r\n  'color': 'orange'\r\n}\r\nconst rowStyle = {\r\n  'padding-top': '10px' \r\n}\r\nconst center = {\r\n  'text-align': 'center'\r\n}\r\nfunction Personalinfo(props) {\r\n    return (\r\n      <Container>\r\n        <Row><img src={image} class=\"profile\" style={rowStyle} alt=\"profile\"/></Row>\r\n        <Row style={rowStyle}>Chit Khine</Row>\r\n        <Row style={rowStyle}>+66958163472</Row>\r\n        <Row style={rowStyle}>ck.light@gmail.com</Row>\r\n        <Row style={rowStyle}>\r\n          <Col xs=\"4\" style={center}>\r\n            <a href=\"https://github.com/landlight\" target=\"_blank\" style={black}>\r\n              <FaGithub />\r\n            </a>    \r\n          </Col>\r\n          <Col xs=\"4\" style={center}>\r\n            <a href=\"https://gitlab.com/landlight\" target=\"_blank\" style={orange}>\r\n              <FaGitlab />\r\n            </a>  \r\n          </Col>\r\n          <Col xs=\"4\" style={center}>\r\n            <a href=\"https://www.linkedin.com/in/chit-khine-891a82b5/\" target=\"_blank\">\r\n              <FaLinkedin />\r\n            </a>\r\n          </Col>\r\n        </Row> \r\n      </Container>\r\n    );\r\n}\r\n\r\nexport default Personalinfo","import React from 'react';\nimport './App.css';\nimport Card from './components/Card';\nimport Profile from './components/Profile';\nimport Personalinfo from './components/PersonalInfo';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <span>\n          Hello, I am <b>Chit Khine</b> a web developer who is always enthusastic to explore new things.\n        </span>\n        <span>\n          In addtion, I am willing to challenge myself in applying new technologies in the IT industry.\n        </span>\n      </header>\n      <body>\n        <Card>\n          <Profile title=\"Personal Information\">\n            <Personalinfo />\n          </Profile>\n        </Card>\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/GodShiro.8d6151e1.jpg\";"],"sourceRoot":""}